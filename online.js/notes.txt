https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array

Метод forEach, filter (перебор массива);
Метод .sort() якщо не отримує ніяку функцію в дужки - переводить елементи масива в строку
     змінює вхідний масив
Копіювати масив const copy = [...inputArray];
                const copy = slice();
Метод reduce
Метод [1, 2, 3, 4].concat(2, 6, [8, 10, 12]) => [1, 2, 3, 4, 2, 6, 8, 10, 12];
Metod .flat(); переводить масив у флет масив

const inArray = [6, 43, 64, 65, 654, 1, 15, 5, 31, 4, 43, 6];



ARRAY METHODS - MAP, SORT, FILTER, REDUCE - знати ППЦ
EVENTS !!!! повчити
OBJECTS - повчити

 
https://learn.javascript.ru/array-methods
>>> Метод arr.splice(str) – это универсальный «швейцарский нож» для работы с массивами. Умеет всё: добавлять, удалять и заменять элементы.

Его синтаксис:

arr.splice(index[, deleteCount, elem1, ..., elemN])
Он начинает с позиции index, удаляет deleteCount элементов и вставляет elem1, ..., elemN на их место. 
Возвращает массив из удалённых элементов.

>>> slice
Он возвращает новый массив, в который копирует элементы, начиная с индекса start и до end (не включая end). 
Оба индекса start и end могут быть отрицательными. В таком случае отсчёт будет осуществляться с конца массива.

Это похоже на строковый метод str.slice, но вместо подстрок возвращает подмассивы.

Code quality (javascript)
Don't use:
1. naming of files/funcs/variables is important 
2. magical numbers or strinags 
3. nesting of the code, more than 2 
4. too much if/else statements 
5. duplicates of the code 
5. variable that is used only once
6. for/while and other loops, use arrays methods 
7. redundant iteration throught arrays or objects - speed 
8. take attention to the memory usage, don't create new array if it is not needed 
10. divide your code into logical blocks
11. BIG code blocks (inside {} - if, loop or array methods) 
12. every line of code should be easy to read
13. every piece of code must be tested 

How to work on tech tasks. Step by step guide
1. Learn requirements
2. Create step by step algo (& input/output for funtions)
3. Write draft solution & testing
4. Refactoring & final testing -> final solution
